Set接口作业

8、编写职工管理程序，某单位为对所有职工的基本信息（职工号、姓名、性别、工资）进行管理，
包括按照工资排序，根据姓名查找职工，删除职工信息（要求将这三个功能分别写成方法后调用）

public class Employee implements Comparable<Employee>{
  private String number;
  private String name;
  private String sex;
  private Double salary;
public String getNumber() {
	return number;
}
public void setNumber(String number) {
	this.number = number;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getSex() {
	return sex;
}
public void setSex(String sex) {
	this.sex = sex;
}
public Double getSalary() {
	return salary;
}
public void setSalary(Double salary) {
	this.salary = salary;
}
public Employee(String number, String name, String sex, double salary) {
	super();
	this.number = number;
	this.name = name;
	this.sex = sex;
	this.salary = salary;
}
@Override
public int compareTo(Employee o) {
	// TODO Auto-generated method stub
	return this.getSalary().compareTo(o.getSalary());
}
  
  
  
}


测试类

 Set<Employee>  emps = new HashSet<Employee>();
		 emps.add(new Employee("1001", "张三", "男", 2300.6));
		 emps.add(new Employee("1002", "李四", "男", 2500.0));
		 emps.add(new Employee("1003", "王五", "女", 2804.2));
		 emps.add(new Employee("1004", "赵六", "男", 3669.1));
		 emps.add(new Employee("1005", "刘七", "男", 5739.7));
		 
		 sortBySalary(emps);
		 
		 Employee e = searchByName("是的是的", emps);
		 if(e!=null){
			 System.out.println("找到此员工！"+e.getNumber()+" "+e.getName()+" "+e.getSex()+" "+e.getSalary()); 
		 }else{
			 System.out.println("未找到此人");
		 }
		 
		 Set<Employee> newEmp = deleteByName("张三",emps); 
		 for(Employee emp:newEmp){
			 System.out.println(emp.getName());
		 }
		 
		 
	}
	//对工资进行排序的方法
	public static void sortBySalary(Set<Employee> set){
		for(Employee e : set){
			System.out.println(e.getNumber()+" "+e.getName()+" "+e.getSex()+" "+e.getSalary());
		}
	}
    //根据姓名查找职工
	public static Employee searchByName(String name,Set<Employee> set){
		for(Employee e : set){
			if(e.getName().equals(name)){
				return e;
			}
		}
		return null;
	}
	//删除职工信息
		public static Set<Employee> deleteByName(String name,Set<Employee> set){
		   	Employee e = searchByName(name, set);	
		   	set.remove(e);
			return set;
		}


List接口作业

3.获取20个1~20之间的随机数，存入List集合，要求不能重复
ArrayList<Integer> list = new ArrayList();
		for(int i=1;i<=20;i++){
			int num = (int)(Math.random()*20)+1;//1-10
			if(!list.contains(num)){
				list.add(num);
			}else{
				i--;
			}
		}
		System.out.println(list);

改进：
List<Integer> list = new ArrayList<>();
	 while(true){
		  int n = (int)(Math.random()*20)+1;
		  if(!list.contains(n))
		     list.add(n);
		  
		  if(list.size()==20)
			  break;
	  }
	  
	  System.out.println(list);

4、存储多个员工信息，包括工号，姓名，年龄，入职时间，逐条打印所有员工姓名，并输出员工个数。
当有员工入职时添加员工信息，当有员工离职时，删除该信息。



5. 键盘录入多个数据，以0结束，要求在控制台输出这多个数据中的最大值



6.创建一个集合存入汽车对象（至少五个）
 查询所有红色宝马的汽车，输出
 
7.模拟斗地主洗牌发牌
 （1）创建一副牌
  （2）向牌中放牌
   （3）洗牌、发牌、看牌

8、张三购买以下商品
商品名称   数量    单价
牛奶         2      3.2
面包         1      5.5
香肠         2      2.5

张三到出口结账
要求售货员打印出张三所购买的信息（模拟购物小票）输出到控制台

小票要求：1.要有一个流水号作为单号
       2.要有打印小票的日期
       3.打印出编码 产品名称    单价  数量  金额
       4.最后打印出应收xxx元  实收xxx元 找零xx元
自己设计小票的格式


Goods 类
 private String name;
  private int num;
  private double price;

Saler类
public class Saler {
	public static double checkMoney(List<Goods> chart){
		double sum=0;
    	for(Goods g:chart){
    		sum+=g.getPrice()*g.getNumber();
    	}
    	return sum;
	}
    public static void checkOut(List<Goods> chart,double money){
    	
    	System.out.println("     欢迎来到XXX超市       ");
    	System.out.println("流水号："+System.currentTimeMillis());
    	System.out.println("日期："+new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
    	System.out.println("时间："+new SimpleDateFormat("HH:mm:ss").format(new Date()));
    	System.out.println("====================================");
    	System.out.println("编号\t名称\t单价\t数量\t金额");
    	double sum=0;
    	for(Goods g:chart){
    		System.out.println(chart.indexOf(g)+1+".\t"+g.getName()+"\t");
    		double gsum=g.getPrice()*g.getNumber();
    		System.out.println("  \t  \t"+g.getPrice()+"\t"+g.getNumber()+"\t"+gsum);
    		sum+=gsum;
    	}
    	System.out.println("===================================");
    	System.out.println("应收："+sum+"元\t\t实收："+money+"元");
    	System.out.println("找零："+(money-sum)+"元"); }
}
测试类：
Scanner sc = new Scanner(System.in);
	System.out.println("你好，开始扫码!");
	
	List<Goods> chart = new ArrayList<>();
	while(true){
		System.out.println("名称：");
		String name=sc.next();
		System.out.println("单价：");
		double price=sc.nextDouble();
		System.out.println("数量：");
		double num =sc.nextDouble();
		Goods g = new Goods(name,price,num);
		chart.add(g);
		System.out.println("是否继续购物？");
		String flag = sc.next();
		if(flag.equals("否")||flag.equalsIgnoreCase("f")||flag.equalsIgnoreCase("fou")){
			break;
		}
		
	}
	System.out.println("给钱a ?给"+Saler.checkMoney(chart));
	double money = sc.nextDouble();
	
	if(money<Saler.checkMoney(chart)){
		System.out.println("不够");
	}else{
		Saler.checkOut(chart, money);
	}
	


Map接口作业
2、硬盘的两个重要属性分别是价格和容量。编写一个应用程序，使用TreeMap<K,V>类，
分别按照价格和容量排序输出5个硬盘的详细信息。


   Map<Double,Integer> map = new TreeMap<>();
       map.put(200.0, 1000);
       map.put(300.0, 2000);
       map.put(100.0, 500);
       map.put(600.0, 300);
       
       System.out.println(map);
       
       List<Entry<Double, Integer>> list = new ArrayList<>(map.entrySet());
    
       Collections.sort(list,new Comparator<Entry<Double, Integer>>() {

		@Override
		public int compare(Entry<Double, Integer> o1, Entry<Double, Integer> o2) {
			// TODO Auto-generated method stub
			return o1.getValue()-o2.getValue();
		}
	});
       System.out.println(list);




3、学生对象包括学号、姓名、性别、年龄、成绩等成员，完成如下功能：
（1）利用set接口或list接口的子类把10个学生加入到集合中
（2）输出所有女生信息
（3）按照成绩从大到小排序输出
（4）把成绩小于50分的学生对象删除
（5）把学号作为key，其他信息作为value值，利用map接口存储10个学生的信息，然后按照成绩从小到大输出


public class Student implements Comparable<Student>{
   private String num;
   private String name;
   private String sex;
   private int age;
   private Double score;
public String getNum() {
	return num;
}
public void setNum(String num) {
	this.num = num;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getSex() {
	return sex;
}
public void setSex(String sex) {
	this.sex = sex;
}
public int getAge() {
	return age;
}
public void setAge(int age) {
	this.age = age;
}
public Double getScore() {
	return score;
}
public void setScore(Double score) {
	this.score = score;
}
public Student(String num, String name, String sex, int age, Double score) {
	super();
	this.num = num;
	this.name = name;
	this.sex = sex;
	this.age = age;
	this.score = score;
}
@Override
public int compareTo(Student o) {
	
	//return this.getScore().compareTo(o.getScore());
	return this.getScore()>o.getScore() ?  1:-1;
}
   
   
}



测试类
//（1）利用set接口和list接口的子类把10个学生加入到集合中
           List<Student> list = new ArrayList<Student>();
           list.add(new Student("0101","张三","男",18,98.5));
           list.add(new Student("0105","李四","女",30,99.0));
           list.add(new Student("0001","王五","男",22,46.3));
         //（2）输出所有女生信息
           for(Student stu:list){
        	   if("女".equals(stu.getSex())){
        		   System.out.println("学号："+stu.getNum()+"  姓名："+stu.getName()+"  性别："+stu.getSex()+" 年龄："+stu.getAge()+" 分数："+stu.getScore());
        	   }
           }
        //   3）按照成绩从大到小排序输出 
           System.out.println("------------------------------------------------------");
           Collections.sort(list);
           for(Student stu:list){
        	   System.out.println("学号："+stu.getNum()+"  姓名："+stu.getName()+"  性别："+stu.getSex()+" 年龄："+stu.getAge()+" 分数："+stu.getScore());
           }
           //（4）把成绩小于50分的学生对象删除
           System.out.println("------------------------------------------------------");
           List<Student> low = new ArrayList<Student>();
           for(Student stu:list){
        	   if(stu.getScore()<50){
        		  low.add(stu);
        	   }
           }
           list.removeAll(low);
           for(Student stu:list){
        	   System.out.println("学号："+stu.getNum()+"  姓名："+stu.getName()+"  性别："+stu.getSex()+" 年龄："+stu.getAge()+" 分数："+stu.getScore());
           }
           System.out.println("------------------------------------------------------");

15、某班30个学生的学号为20070301 ~ 20070330  全部选修了Java程序设计课程，给出所有同学成绩
 （实现时可用随机数产生，范围为60~100），请编写一个程序StuSore。java将该班的java程序设计课程成绩按高到低排序打印输出
  要求分别用List和Map来实现，打印的成绩表包括学号、姓名、性别、成绩，如下所示
例如： 
   20120324  张  三  男   95
   20120310  李丽芳  女   90
   20120302  王小五  男   88
   
   List<Student> stus = new ArrayList<>();
		String[] sexs = {"男","女"};
		for(int i=1;i<=30;i++){
			String no=((i+"").length()==1)?("0"+i):i+"";
			String name ="张"+i;
			String sex = sexs[(int)(Math.random()*2)];
			stus.add(new Student("200703"+no,(int)(Math.random()*41)+60, name, sex));
		}
     
		Collections.sort(stus,new Comparator<Student>() {
			@Override
			public int compare(Student o1, Student o2) {
				// TODO Auto-generated method stub
				return o1.getScore().compareTo(o2.getScore());
			}
		});
		
		show(stus);
	}
	
	public static void show(List<Student> stus){
		for(Student s:stus){
			System.out.println(s);
		}
	}
Map

  	Map<String,Student> stus = new TreeMap<>();
		String[] sexs = {"男","女"};
		for(int i=1;i<=30;i++){
			String no=((i+"").length()==1)?("0"+i):i+"";
			String name ="张"+i;
			String sex = sexs[(int)(Math.random()*2)];
			stus.put("200701"+no,new Student("200701"+no,(int)(Math.random()*41)+60, name, sex));
		}
		
		List<Entry<String,Student>> list = new ArrayList<>(stus.entrySet());
		Collections.sort(list,new  Comparator<Entry<String,Student>>() {

			@Override
			public int compare(Entry<String, Student> o1, Entry<String, Student> o2) {
				// TODO Auto-generated method stub
				return o1.getValue().getScore()-o2.getValue().getScore();
			}
		});
		show(list);
		
	}
	
	public static void show(List<Entry<String,Student>> stus){
		for(Entry<String,Student> e:stus){
			System.out.println(e.getKey()+"\t"+e.getValue());
		}
	}

   